// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: exchange.proto

package exchange_grpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ExchangeAllResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeAllResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeAllResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeAllResponseMultiError, or nil if none found.
func (m *ExchangeAllResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeAllResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rates

	if len(errors) > 0 {
		return ExchangeAllResponseMultiError(errors)
	}

	return nil
}

// ExchangeAllResponseMultiError is an error wrapping multiple validation
// errors returned by ExchangeAllResponse.ValidateAll() if the designated
// constraints aren't met.
type ExchangeAllResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeAllResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeAllResponseMultiError) AllErrors() []error { return m }

// ExchangeAllResponseValidationError is the validation error returned by
// ExchangeAllResponse.Validate if the designated constraints aren't met.
type ExchangeAllResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeAllResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeAllResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeAllResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeAllResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeAllResponseValidationError) ErrorName() string {
	return "ExchangeAllResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeAllResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeAllResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeAllResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeAllResponseValidationError{}

// Validate checks the field values on EmptyMSG with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyMSG) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyMSG with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyMSGMultiError, or nil
// if none found.
func (m *EmptyMSG) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyMSG) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyMSGMultiError(errors)
	}

	return nil
}

// EmptyMSGMultiError is an error wrapping multiple validation errors returned
// by EmptyMSG.ValidateAll() if the designated constraints aren't met.
type EmptyMSGMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyMSGMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyMSGMultiError) AllErrors() []error { return m }

// EmptyMSGValidationError is the validation error returned by
// EmptyMSG.Validate if the designated constraints aren't met.
type EmptyMSGValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyMSGValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyMSGValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyMSGValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyMSGValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyMSGValidationError) ErrorName() string { return "EmptyMSGValidationError" }

// Error satisfies the builtin error interface
func (e EmptyMSGValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyMSG.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyMSGValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyMSGValidationError{}

// Validate checks the field values on ExchangeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExchangeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeRequestMultiError, or nil if none found.
func (m *ExchangeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFromCurrency()) < 3 {
		err := ExchangeRequestValidationError{
			field:  "FromCurrency",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetToCurrency()) < 3 {
		err := ExchangeRequestValidationError{
			field:  "ToCurrency",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExchangeRequestMultiError(errors)
	}

	return nil
}

// ExchangeRequestMultiError is an error wrapping multiple validation errors
// returned by ExchangeRequest.ValidateAll() if the designated constraints
// aren't met.
type ExchangeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeRequestMultiError) AllErrors() []error { return m }

// ExchangeRequestValidationError is the validation error returned by
// ExchangeRequest.Validate if the designated constraints aren't met.
type ExchangeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeRequestValidationError) ErrorName() string { return "ExchangeRequestValidationError" }

// Error satisfies the builtin error interface
func (e ExchangeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeRequestValidationError{}

// Validate checks the field values on ExchangeOneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeOneResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeOneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeOneResponseMultiError, or nil if none found.
func (m *ExchangeOneResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeOneResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFromCurrency()) < 3 {
		err := ExchangeOneResponseValidationError{
			field:  "FromCurrency",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetToCurrency()) < 3 {
		err := ExchangeOneResponseValidationError{
			field:  "ToCurrency",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRate() <= 0 {
		err := ExchangeOneResponseValidationError{
			field:  "Rate",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExchangeOneResponseMultiError(errors)
	}

	return nil
}

// ExchangeOneResponseMultiError is an error wrapping multiple validation
// errors returned by ExchangeOneResponse.ValidateAll() if the designated
// constraints aren't met.
type ExchangeOneResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeOneResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeOneResponseMultiError) AllErrors() []error { return m }

// ExchangeOneResponseValidationError is the validation error returned by
// ExchangeOneResponse.Validate if the designated constraints aren't met.
type ExchangeOneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeOneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeOneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeOneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeOneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeOneResponseValidationError) ErrorName() string {
	return "ExchangeOneResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeOneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeOneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeOneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeOneResponseValidationError{}
